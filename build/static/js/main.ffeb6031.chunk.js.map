{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","console","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetfilxOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","fetch","res","json","log","Math","floor","random","style","backgroundSize","backgroundImage","backgroundPosition","overview","length","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ffeb6031.chunk.js","sourcesContent":["\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React,{useState,useEffect} from 'react'\r\nimport axios from './axios'\r\nimport './Row.css'\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n   \r\n\r\n   \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n        const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || movie?.original_name || movie?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch(console.error());\r\n    }\r\n  }\r\n    \r\n    return (\r\n        \r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            \r\n                <div className=\"row__posters\">\r\n             {\r\n                            movies.map((movie)=>(\r\n                                <img \r\n                                key={movie.id}\r\n                                onClick={()=>handleClick(movie)}\r\n                                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                                src={`${base_url}${isLargeRow? movie.poster_path: movie.backdrop_path}`} \r\n                                alt={movie.name}/>\r\n                            ))\r\n             }\r\n                </div>\r\n            \r\n           { trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"739f18bcb1eb0668d608183159336b45\"\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetfilxOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n  };\r\nexport default requests;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport requests from './request'\r\nimport './Banner.css'\r\nfunction Banner() {\r\n    const [movie,setMovies] = useState([]);\r\n       \r\n    useEffect(() => {\r\n            \r\n            const fetchData =() => {\r\n               return fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=739f18bcb1eb0668d608183159336b45&with_networks=213\")\r\n               .then(res => res.json()) \r\n               .then(data => {\r\n                    console.log(data)\r\n                 setMovies(data.results[Math.floor(Math.random() * 19)]);\r\n\r\n                })\r\n                .catch(error => console.log(error))\r\n            }\r\n            fetchData();\r\n          }, []);\r\n      \r\n    console.log(movie)\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0,n-1) + \"...\" :str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(\r\n            https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n            backgroundPosition:\"center center\",\r\n        }}>\r\n            <div className=\"banner__contents\">\r\n            <h1 className=\"banner__title\">\r\n                {movie?.title|| movie?.name||movie?.original_name}\r\n            </h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n            </div >\r\n           \r\n        <h1 className=\"banner__description\">{movie?.overview}\r\n        {\r\n            truncate(movie?.overview,150)\r\n        }\r\n        </h1>\r\n        \r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Navbar.css'\r\n\r\nfunction Navbar() {\r\n    const [show,handleShow]=useState(false)\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>50){\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false);\r\n        })\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n            className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png\"\r\n            alt=\"netflix logo\"/>\r\n           <img\r\n           className=\"nav__avatar\"\r\n           src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n           alt=\"Netlix Logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row'\n import requests from './request'\n import Banner from './Banner'\n import Navbar from './Navbar'\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar/>\n      <Banner/>\n        <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetfilxOriginals} isLargeRow/>\n        <Row title=\"Trending Now\"fetchUrl={requests.fetchTrending}  />\n        <Row title=\"Top Rated\"fetchUrl={requests.fetchTopRated}/>\n        <Row title=\"Action Movies\"fetchUrl={requests.fetchActionMovies}/>\n        <Row title=\"Comedy Movies\"fetchUrl={requests.fetchComedyMovies}/>\n        <Row title=\"Horror Movies\"fetchUrl={requests.fetchHorrorMovies}/>\n        <Row title=\"Romance Movies\"fetchUrl={requests.fetchRomanceMovies}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}